{"version":3,"file":"FirebaseApp.js","sourceRoot":"","sources":["../src/FirebaseApp.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAEhD,MAAM,WAAW;IAGf,YAAY,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,WAAW;QACT,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE;YACnC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;SACtE;QACD,aAAa;QACb,OAAO,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,eAAe;QACb,aAAa;QACb,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;YACvC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;SAC1E;QACD,aAAa;QACb,OAAO,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,OAAa,EAAE,IAAa;IACnE,aAAa;IACb,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE;QACvC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;KAC1E;IACD,aAAa;IACb,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACxE,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,IAAa;IAC7C,aAAa;IACb,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;QAChC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;KACnE;IACD,aAAa;IACb,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACxD,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY;IAChC,aAAa;IACb,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;KACpE;IACD,aAAa;IACb,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,YAAY,EAAE,CAAC;IACtD,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED;;;;GAIG","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport ExpoFirebaseApp from './ExpoFirebaseApp';\n\nclass FirebaseApp {\n  public readonly name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  deleteAsync(): Promise<void> {\n    // @ts-ignore\n    if (!ExpoFirebaseApp.deleteAppAsync) {\n      throw new UnavailabilityError('expo-firebase-app', 'deleteAppAsync');\n    }\n    // @ts-ignore\n    return ExpoFirebaseApp.deleteAppAsync(this.name);\n  }\n\n  getOptionsAsync(): Promise<any> {\n    // @ts-ignore\n    if (!ExpoFirebaseApp.getAppOptionsAsync) {\n      throw new UnavailabilityError('expo-firebase-app', 'getAppOptionsAsync');\n    }\n    // @ts-ignore\n    return ExpoFirebaseApp.getAppOptionsAsync(this.name);\n  }\n}\n\n/**\n * Similar to `firebase.initializeApp()` on web but works to start a native Firebase app while the app is running.\n * This can be used to test the native iOS Firebase app in the Expo client.\n * This method should not be used in production, instead the app should be bundled with the native Google Services files via the `app.json`.\n *\n * @param googleServices Platform specific Google Services file for starting a Firebase app during runtime\n */\nexport async function initializeAppAsync(options?: any, name?: string): Promise<FirebaseApp> {\n  // @ts-ignore\n  if (!ExpoFirebaseApp.initializeAppAsync) {\n    throw new UnavailabilityError('expo-firebase-app', 'initializeAppAsync');\n  }\n  // @ts-ignore\n  const appName = await ExpoFirebaseApp.initializeAppAsync(options, name);\n  return new FirebaseApp(appName);\n}\n\nexport async function getAppAsync(name?: string): Promise<FirebaseApp> {\n  // @ts-ignore\n  if (!ExpoFirebaseApp.getAppAsync) {\n    throw new UnavailabilityError('expo-firebase-app', 'getAppAsync');\n  }\n  // @ts-ignore\n  const appName = await ExpoFirebaseApp.getAppAsync(name);\n  return new FirebaseApp(appName);\n}\n\nexport async function getAppsAsync(): Promise<FirebaseApp[]> {\n  // @ts-ignore\n  if (!ExpoFirebaseApp.getAppsAsync) {\n    throw new UnavailabilityError('expo-firebase-app', 'getAppsAsync');\n  }\n  // @ts-ignore\n  const appNames = await ExpoFirebaseApp.getAppsAsync();\n  return appNames.map(appName => new FirebaseApp(appName));\n}\n\n/**\n * Delete a running Firebase app instance. Only works for the default app. If no default app is running then nothing happens.\n *\n * @param googleServices Platform specific Google Services file.\n */\n"]}