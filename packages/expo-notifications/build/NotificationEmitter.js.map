{"version":3,"file":"NotificationEmitter.js","sourceRoot":"","sources":["../src/NotificationEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,MAAM,kBAAkB,CAAC;AAC9D,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAKxD,iCAAiC;AACjC,MAAM,mBAAmB,GAAG,IAAI,YAAY,CAAC,mBAAmB,CAAC,CAAC;AAClE,MAAM,wBAAwB,GAAG,2BAA2B,CAAC;AAE7D,MAAM,UAAU,uBAAuB,CAAC,QAA8B;IACpE,OAAO,mBAAmB,CAAC,WAAW,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AAC7E,CAAC;AAED,MAAM,UAAU,8BAA8B,CAAC,YAA0B;IACvE,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,8BAA8B;IAC5C,mBAAmB,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;AACnE,CAAC","sourcesContent":["import { EventEmitter, Subscription } from '@unimodules/core';\nimport NotificationsModule from './NotificationsModule';\n\ntype Notification = any;\nexport type NotificationListener = (notification: Notification) => void;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new EventEmitter(NotificationsModule);\nconst newNotificationEventName = 'onWillPresentNotification';\n\nexport function addNotificationListener(listener: NotificationListener): Subscription {\n  return notificationEmitter.addListener(newNotificationEventName, listener);\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  notificationEmitter.removeSubscription(subscription);\n}\n\nexport function removeAllNotificationListeners() {\n  notificationEmitter.removeAllListeners(newNotificationEventName);\n}\n"]}